const fs = require("fs");
const winston = require("winston");
const DailyRotateFile = require("winston-daily-rotate-file");

const {
  keyboard,
  check_style,
  chatOptions_profile,
  admin_btns,
} = require("./func/btns");

const {
  add_user,
  send_photo,
  send_dynamic_add_photo,
  createPDF,
  delOrder,
  add_gender,
  get_gender,
  past_orders,
  update_bonus,
  add_style,
  get_userStyle,
  get_currentOrder,
  new_order,
  addToOrder,
  add_email,
  add_location,
  add_fio,
  check_payment,
  search_articul,
  add_msk,
  getProfile,
} = require("./DB/db");

const { editCaptionShow } = require("./func/carusel");
const {
  start,
  tech,
  start_admin,
  check_folow,
  start_update,
  profile,
} = require("./func/main-func");

const { admins } = require("./func/admin");
const { gender_choose } = require("./func/gender");
const {
  next_photo_o,
  prev_photo_o,
  showorders,
} = require("./func/orders-controller");
const { next_photo, prev_photo } = require("./func/show-controller");

const userSessions = new Map();
let userSession;
let selectedPhoto = 0;
const YokrossId = "@stockhub12";
let check;
const userStorage = {};

const logger = winston.createLogger({
  level: "info",
  format: winston.format.combine(
    winston.format.timestamp({
      format: "YYYY-MM-DD HH:mm:ss",
    }),
    winston.format.printf(
      (info) => `${info.timestamp} ${info.level}: ${info.message}`
    )
  ),
  transports: [
    new winston.transports.Console(),
    new DailyRotateFile({
      filename: "./src/logs/bot-%DATE%.log",
      datePattern: "YYYY-MM-DD",
      zippedArchive: true,
      maxSize: "20m",
      maxFiles: "14d",
    }),
  ],
});

const objectToString = (obj) => {
  if (typeof obj === "object") {
    return JSON.stringify(obj, null, 2);
  }
  return obj.toString();
};

// ============ StartMenu ============
module.exports = (bot) => {
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.chat.username;
    const messageId = msg.message_id;

    check = await check_folow(YokrossId, chatId, bot, msg.chat.username);
    console.log(check);
    if (check === true) {
      bot.deleteMessage(chatId, messageId - 1);
      bot.deleteMessage(chatId, messageId - 2);
      await start(bot, chatId, msg.chat.first_name);
      const res = await add_user(chatId, msg.chat.username);
      logger.info(`User ${username} was auth. Database: ${res}`);
    }
  });

  bot.onText(/\/guide/, async (msg) => {
    bot.deleteMessage(msg.chat.id, msg.message_id - 1);
    bot.deleteMessage(msg.chat.id, msg.message_id - 2);
    bot.sendMessage(
      msg.chat.id,
      `<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –≥–∞–π–¥:</b> \n<i><a href="https://t.me/yokrossguide12/5">Guide</a></i>`,
      { parse_mode: "HTML" }
    );
  });

  bot.onText(/\/commands/, async (msg) => {
    bot.deleteMessage(msg.chat.id, msg.message_id - 1);
    bot.deleteMessage(msg.chat.id, msg.message_id - 2);
    await bot.sendMessage(
      msg.chat.id,
      `<b>‚öôÔ∏è ${msg.chat.username}</b> –≤–æ—Ç –ø–∞—Ä—É –∫–æ–º–∞–Ω–¥:\n\n` +
        `‚ûñ <b>/start</b> - <i>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞</i>\n` +
        `‚ûñ <b>/donate</b> - <i>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤</i>\n` +
        `‚ûñ <b>/guide</b> - <i>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∞–π–¥</i>\n`,
      { parse_mode: "HTML" }
    );
  });

  bot.onText(/\/admin/, async (msg) => {
    const chat_id = msg.chat.id.toString();
    if (
      process.env.ADMIN_ID === chat_id ||
      process.env.GROUP_ADMIN === chat_id ||
      process.env.LOGIST_ID === chat_id ||
      process.env.SERVIRCE_ID === chat_id
    ) {
      await start_admin(bot, msg.chat.id);
    } else {
      bot.sendMessage(msg.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
    }
  });

  bot.onText(/\/donate/, async (msg) => {
    bot.deleteMessage(msg.chat.id, msg.message_id - 1);
    bot.deleteMessage(msg.chat.id, msg.message_id - 2);
    bot.sendMessage(
      msg.chat.id,
      `‚úåüèª Yo <b>${msg.chat.first_name}</b>, —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Ä–∞–∑–≤–∏—Ç–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–¥–æ–Ω–∞—Ç–∏–≤ –ª—é–±—É—é —Å—É–º–º—É!\n\n` +
        `<b>–¢–∏–Ω—å–∫–æ—Ñ—Ñ: </b><code>5536 9139 7089 6656</code>`,
      { parse_mode: "HTML" }
    );
  });

  //calbaks for menues
  bot.on("callback_query", async (msg) => {
    const data = msg.data;
    const chatId = msg.message.chat.id;
    const user_callBack = msg.message.chat.username;
    const messageId = msg.message.message_id;

    switch (data) {
      case "admin":
        bot.deleteMessage(chatId, messageId);
        const chat_id = msg.message.chat.id.toString();
        if (
          process.env.ADMIN_ID === chat_id ||
          process.env.GROUP_ADMIN === chat_id ||
          process.env.LOGIST_ID === chat_id ||
          process.env.SERVIRCE_ID === chat_id
        ) {
          await start_admin(bot, chatId);
        } else {
          bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
        }
        break;

      case "admin_tables":
        bot.deleteMessage(chatId, messageId);
        await admins(bot, chatId);
        break;

      case "snippets":
        bot.deleteMessage(chatId, messageId);
        bot.sendMessage(
          chatId,
          "<i><b>Snippets</b></i>\n\n" +
            `‚ûñ <b><i>–°–Ω–∏–ø–ø–µ—Ç –ø—Ä–∞–≤–∏–ª:</i></b>\n` +
            `<b><i><a href = "https://telegra.ph/Pravila-chata-11-06-17">üìë –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞</a></i></b>\n‚ÅâÔ∏è –£–≤–∞–∂–µ–Ω–∏–µ —Ç—Ä—É–¥–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –ª–µ–≥–∫–æ –ø–æ—Ç–µ—Ä—è—Ç—å.`,
          { parse_mode: "HTML", reply_markup: JSON.stringify(admin_btns) }
        );
        break;

      case "locale":
        // bot.deleteMessage(chatId, messageId);

        bot.editMessageCaption(
          `‚úåüèº Yo ${msg.message.chat.first_name}, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –±–ª–∏–∂–µ –∫ —Ç–µ–±–µ –∏–ª–∏ –∞–¥—Ä–µ—Å—Å –ü–í–ó Boxberry.\n\n` +
            `<i>P.S –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è <i><b>–ü–í–ó Boxberry</b></i>, —Ç–æ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</i>\n\n` +
            `<i>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –†–æ—Å—Å–∏–∏: –ô–æ—à–∫–∞—Ä-–û–ª–∞, –ô—ã–≤–∞–Ω–∞ –ö—ã—Ä–ª–∏ 44</i>\n\n`,
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [
                  {
                    text: "üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É",
                    web_app: { url: "https://yandex.ru/maps/" },
                  },
                  {
                    text: "üß® –û—Ç–º–µ–Ω–∞",
                    callback_data: "cancel",
                  },
                ],
              ],
            }),
          }
        );

        userStorage[chatId] = { state: "awaitingAddress" };
        break;

      case "email":
        // bot.deleteMessage(chatId, messageId);

        bot.editMessageCaption(
          `‚úåüèº Yo <b>${msg.message.chat.first_name}</b>, –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é –ø–æ—á—Ç—É (—ç—Ç–æ –Ω–∞–¥–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏)`,
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [
                  {
                    text: "üß® –û—Ç–º–µ–Ω–∞",
                    callback_data: "cancel",
                  },
                ],
              ],
            }),
          }
        );

        userStorage[chatId] = { state: "awaitingEmail" };
        break;

      case "fio":
        // bot.deleteMessage(chatId, messageId);

        bot.editMessageCaption(
          `‚úåüèº Yo <b>${msg.message.chat.first_name}</b>, –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –§–ò–û (—ç—Ç–æ –Ω–∞–¥–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ)`,
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [
                  {
                    text: "üß® –û—Ç–º–µ–Ω–∞",
                    callback_data: "cancel",
                  },
                ],
              ],
            }),
          }
        );

        userStorage[chatId] = { state: "awaitingFIO" };
        break;

      case "cancel":
        // bot.deleteMessage(chatId, messageId);
        await profile(
          bot,
          chatId,
          userStorage,
          msg.message.chat.first_name,
          messageId
        );
        break;

      case "choose":
        // bot.deleteMessage(chatId, messageId);
        check = await check_folow(YokrossId, chatId, bot, user_callBack);
        if (check === true) {
          bot.editMessageCaption(
            `‚úåüèº Yo <i><b>${msg.message.chat.first_name}</b></i>, –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Ç–∏–ø –∫—Ä–æ—Å—Å–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏`,
            {
              chat_id: chatId,
              message_id: messageId,
              parse_mode: "HTML",
              reply_markup: JSON.stringify({
                inline_keyboard: [
                  [{ text: "üëü –õ–∞–π—Ñ—Å—Ç–∞–π–ª", callback_data: "lifestyle" }],
                  [{ text: "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–µ", callback_data: "basket" }],
                  [{ text: "‚öΩÔ∏è –§—É—Ç–±–æ–ª—å–Ω—ã–µ", callback_data: "football" }],
                  [{ text: "üè† –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "exit" }],
                ],
              }),
            }
          );
          break;
        }

      case "lifestyle":
        // bot.deleteMessage(chatId, messageId);

        await add_style(chatId, "lifestyle");
        await gender_choose(bot, msg, chatId, messageId);

        logger.info(`${msg.message.chat.first_name} choose brand lifestyle`);
        break;

      case "basket":
        // bot.deleteMessage(chatId, messageId);

        await add_style(chatId, "basket");
        await gender_choose(bot, msg, chatId, messageId);

        logger.info(`${msg.message.chat.first_name} choose brand basketball`);
        break;

      case "football":
        // bot.deleteMessage(chatId, messageId);

        await add_style(chatId, "football");
        await gender_choose(bot, msg, chatId, messageId);

        logger.info(`${msg.message.chat.first_name} choose brand football`);
        break;

      case "man":
        // bot.deleteMessage(chatId, messageId);

        await add_gender(chatId, "man");
        const model_m = await check_style(chatId);
        await bot.editMessageMedia(
          { type: "photo", media: await send_photo("man"), caption: "" },
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: JSON.stringify(model_m),
          }
        );
        break;

      case "woman":
        // bot.deleteMessage(chatId, messageId);

        await add_gender(chatId, "woman");
        const model_w = await check_style(chatId);
        await bot.editMessageMedia(
          {
            type: "photo",
            media: await send_photo("woman"),
            caption: "",
          },
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: JSON.stringify(model_w),
          }
        );
        break;

      case "Nike":
        logger.info(`${msg.message.chat.first_name} choose Nike`);
        // bot.deleteMessage(chatId, messageId);
        await bot.editMessageMedia(
          {
            type: "photo",
            media: await send_photo(`${data}_size`),
            caption: `üëü –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã <b>${data}</b>\n\n ‚ùóÔ∏è –ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Ä–∞–∑–º–µ—Ä –∏ —è –≤—ã–≤–µ–¥—É —Ç–µ–±–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.\n\nüí¨ <i>–ü—Ä–∏–º–µ—Ä: 8 –∏–ª–∏ 8.5</i>`,
            parse_mode: "HTML",
          },
          {
            chat_id: chatId,
            message_id: messageId,
          }
        );

        userStorage[chatId] = { state: "brandChoice", data: data };
        break;

      case "Adidas":
        logger.info(`${msg.message.chat.first_name} choose Adidas`);

        // bot.deleteMessage(chatId, messageId);
        await bot.editMessageMedia(
          {
            type: "photo",
            media: await send_photo(`${data}_size`),
            caption: `üëü –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã <b>${data}</b>\n\n ‚ùóÔ∏è –ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Ä–∞–∑–º–µ—Ä –∏ —è –≤—ã–≤–µ–¥—É —Ç–µ–±–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.\n\nüí¨ <i>–ü—Ä–∏–º–µ—Ä: 8 –∏–ª–∏ 8.5</i>`,
            parse_mode: "HTML",
          },
          {
            chat_id: chatId,
            message_id: messageId,
          }
        );

        userStorage[chatId] = { state: "brandChoice", data: data };
        break;

      case "Reebok":
        logger.info(`${msg.message.chat.first_name} choose Reebok`);

        // bot.deleteMessage(chatId, messageId);
        await bot.editMessageMedia(
          {
            type: "photo",
            media: await send_photo(`${data}_size`),
            caption: `üëü –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã <b>${data}</b>\n\n ‚ùóÔ∏è –ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Ä–∞–∑–º–µ—Ä –∏ —è –≤—ã–≤–µ–¥—É —Ç–µ–±–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.\n\nüí¨ <i>–ü—Ä–∏–º–µ—Ä: 8 –∏–ª–∏ 8.5</i>`,
            parse_mode: "HTML",
          },
          {
            chat_id: chatId,
            message_id: messageId,
          }
        );
        userStorage[chatId] = { state: "brandChoice", data: data };
        break;

      case "Puma":
        logger.info(`${msg.message.chat.first_name} choose Puma`);

        // bot.deleteMessage(chatId, messageId);
        await bot.editMessageMedia(
          {
            type: "photo",
            media: await send_photo(`${data}_size`),
            caption: `üëü –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã <b>${data}</b>\n\n ‚ùóÔ∏è –ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Ä–∞–∑–º–µ—Ä –∏ —è –≤—ã–≤–µ–¥—É —Ç–µ–±–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.\n\nüí¨ <i>–ü—Ä–∏–º–µ—Ä: 8 –∏–ª–∏ 8.5</i>`,
            parse_mode: "HTML",
          },
          {
            chat_id: chatId,
            message_id: messageId,
          }
        );
        userStorage[chatId] = { state: "brandChoice", data: data };
        break;

      case "Jordan":
        logger.info(`${msg.message.chat.first_name} choose Jordan`);

        // bot.deleteMessage(chatId, messageId);
        await bot.editMessageMedia(
          {
            type: "photo",
            media: await send_photo(`${data}_size`),
            caption: `üëü –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã <b>${data}</b>\n\n ‚ùóÔ∏è –ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Ä–∞–∑–º–µ—Ä –∏ —è –≤—ã–≤–µ–¥—É —Ç–µ–±–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.\n\nüí¨ <i>–ü—Ä–∏–º–µ—Ä: 8 –∏–ª–∏ 8.5</i>`,
            parse_mode: "HTML",
          },
          {
            chat_id: chatId,
            message_id: messageId,
          }
        );
        userStorage[chatId] = { state: "brandChoice", data: data };
        break;

      case "NewBalance":
        logger.info(`${msg.message.chat.first_name} choose NewBalance`);

        // bot.deleteMessage(chatId, messageId);
        await bot.editMessageMedia(
          {
            type: "photo",
            media: await send_photo(`${data}_size`),
            caption: `üëü –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã <b>${data}</b>\n\n ‚ùóÔ∏è –ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Ä–∞–∑–º–µ—Ä –∏ —è –≤—ã–≤–µ–¥—É —Ç–µ–±–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.\n\nüí¨ <i>–ü—Ä–∏–º–µ—Ä: 8 –∏–ª–∏ 8.5</i>`,
            parse_mode: "HTML",
          },
          {
            chat_id: chatId,
            message_id: messageId,
          }
        );
        userStorage[chatId] = { state: "brandChoice", data: data };
        break;

      case "profile":
        // bot.deleteMessage(chatId, messageId);
        check = await check_folow(YokrossId, chatId, bot, user_callBack);

        if (check === true) {
          await profile(
            bot,
            chatId,
            userStorage,
            msg.message.chat.first_name,
            messageId
          );
        }
        break;

      case "data_orders":
        // bot.deleteMessage(chatId, messageId);
        const orders = await past_orders(chatId);
        console.log(orders);
        if (orders === false) {
          bot.editMessageCaption(
            `‚úåüèº Yo ${msg.message.chat.first_name}, —Ç—ã –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞!\n\n` +
              `–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –≤ <i><b>‚ö°Ô∏è Show Room</b></i> –∏–ª–∏ –Ω–∞–π—Ç–∏ –ø–∞—Ä—É –ø–æ —Ñ–∏–ª—å—Ç—Ä—É <i><b>üîé –ü–æ–∏—Å–∫ –ø–∞—Ä—ã</b></i>`,
            {
              chat_id: chatId,
              message_id: messageId,
              parse_mode: "HTML",
              reply_markup: JSON.stringify(chatOptions_profile),
            }
          );
        } else {
          await showorders(bot, orders, chatId, userStorage, msg);
        }

        break;

      case "articul":
        // bot.deleteMessage(chatId, messageId);

        bot.editMessageCaption(
          `Yo <i><b>${msg.message.chat.first_name}</b></i>, –≤–≤–µ–¥–∏ –∞—Ä—Ç–∏–∫—É–ª –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏:`,
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "HTML",
          }
        );

        userStorage[chatId] = { state: "articul" };
        break;

      case "next_photo_o":
        bot.deleteMessage(chatId, messageId);
        userSession = userSessions.get(chatId);

        await next_photo_o(bot, userStorage, chatId);
        break;

      case "prev_photo_o":
        bot.deleteMessage(chatId, messageId);
        userSession = userSessions.get(chatId);

        await prev_photo_o(bot, chatId, userStorage);
        break;

      case "end":
        bot.deleteMessage(chatId, messageId);
        await start(bot, chatId, msg.message.chat.first_name);
        break;

      case "home":
        await add_user(chatId, msg.message.chat.username);
        logger.info(`User ${msg.message.chat.first_name} go to Menu.`);

        bot.deleteMessage(chatId, messageId);
        await start_update(bot, chatId, msg.message.chat.first_name, messageId);
        break;

      case "exit":
        // bot.deleteMessage(chatId, messageId + 1);
        await add_user(chatId, msg.message.chat.username);

        check = await check_folow(YokrossId, chatId, bot, user_callBack);
        if (check === true) {
          logger.info(`User ${msg.message.chat.first_name} go to Menu.`);
          // await start(bot, chatId, msg.message.chat.first_name);
          await start_update(
            bot,
            chatId,
            msg.message.chat.first_name,
            messageId
          );
        }
        break;

      case "show":
        // bot.deleteMessage(chatId, messageId);
        check = await check_folow(YokrossId, chatId, bot, user_callBack);
        if (check === true) {
          logger.info(`User ${msg.message.chat.first_name} in ShowRoom.`);
          userSession = userSessions.get(chatId);
          const photosWithDescriptions = await send_dynamic_add_photo();

          if (photosWithDescriptions === false) {
            bot.sendMessage(
              chatId,
              `‚úåüèº Yo <i><b>${msg.message.chat.first_name}</b></i>, –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–∞—Ä, –∏–∑–≤–∏–Ω–∏ –∑–∞ –Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏–µ. –°–∫–æ—Ä–æ –ø–æ—Ñ–∏–∫—Å–∏–º!`,
              {
                parse_mode: "HTML",
                reply_markup: JSON.stringify(keyboard),
              }
            );
          } else {
            userStorage[chatId] = {
              photo: photosWithDescriptions,
              currentIndex: 0,
            };

            if (userStorage[chatId].photo.length > 0) {
              const currentIndex = userStorage[chatId].currentIndex;
              const firstPhoto = userStorage[chatId].photo[currentIndex];
              const totalPhotos = userStorage[chatId].photo.length;
              const showPrevButton = currentIndex > 0;

              await editCaptionShow(
                bot,
                chatId,
                userSession,
                messageId,
                currentIndex,
                firstPhoto,
                totalPhotos,
                showPrevButton
              );
            }
          }
        }
        break;

      case "next_photo":
        //bot.deleteMessage(chatId, messageId);
        userSession = userSessions.get(chatId);

        await next_photo(bot, chatId, userStorage, messageId);
        break;

      case "prev_photo":
        //bot.deleteMessage(chatId, messageId);
        userSession = userSessions.get(chatId);

        await prev_photo(bot, chatId, userStorage, messageId);
        break;

      case "order":
        // bot.deleteMessage(chatId, messageId);

        selectedPhoto =
          userStorage[chatId].photo[userStorage[chatId].currentIndex];

        const profileData = await getProfile(chatId);
        console.log(profileData);
        if (profileData.length > 0) {
          const profile = profileData[0];
          userSession = {
            order_id: chatId + Date.now(),
            name: selectedPhoto.name,
            size: selectedPhoto.size,
            price: selectedPhoto.price,
            locale: profile.locale,
            email: profile.email,
            fio: profile.fio,
          };
          console.log(profile);
          logger.info(objectToString(profile));
          userStorage[chatId] = { order_id: userSession.order_id };

          userSessions.set(chatId, userSession);
          logger.info(userSession.locale, userSession.email, userSession.fio);

          if (userSession.locale && userSession.email && userSession.fio) {
            const addting = await new_order(
              chatId,
              userSession.order_id,
              userSession.name,
              userSession.size,
              userSession.price,
              userSession.locale,
              userSession.email,
              userSession.fio
            );

            logger.info(`Add to DB: ${objectToString(addting)}`);
            bot.editMessageCaption(
              `Yo ${msg.message.chat.first_name} –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ!\n\n` +
                `‚úåüèº <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å: </b><i>${userSession.fio}</i>\n` +
                `üöö <b>–ü–í–ó Boxberry: </b><i>${userSession.locale}</i>\n` +
                `‚úâÔ∏è <b>Email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞: </b><i>${userSession.email}</i>\n\n` +
                `üëü <b>–ö—Ä–æ—Å—Å–æ–≤–∫–∏ <i>${selectedPhoto.name}</i></b>\n\n` +
                `üßµ <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n\n` +
                `‚ûñ <b>–¶–≤–µ—Ç:</b> <i>${selectedPhoto.color}</i>\n` +
                `‚ûñ <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b> <i>${selectedPhoto.material}</i>\n` +
                `‚ûñ <b>–†–∞–∑–º–µ—Ä:</b> <i>${selectedPhoto.size} us</i>\n\n` +
                `üí∏ <b>–¶–µ–Ω–∞:</b> <code>${selectedPhoto.price}‚ÇΩ</code>\n\n` +
                `Yo <i>${msg.message.chat.first_name}</i>, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–π <i><b>üìë –î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã</b></i>\n`,

              {
                parse_mode: "HTML",
                chat_id: chatId,
                message_id: messageId,
                reply_markup: JSON.stringify({
                  inline_keyboard: [
                    [
                      {
                        text: "üìë –î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã",
                        url: "https://telegra.ph/Dogovor-oferty-na-okazanie-uslugi-11-27",
                      },
                    ],
                    [
                      {
                        text: `üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ #${userSession.order_id}`,
                        url: `https://stockhub12.ru/payanyway.php?orderId=${userSession.order_id}`,
                      },
                    ],
                    [
                      { text: "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data: "payment" },
                      {
                        text: "üß® –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                        callback_data: "cancel_order",
                      },
                    ],
                  ],
                }),
              }
            );
          } else {
            bot.sendMessage(
              chatId,
              `<i><b>‚úåüèº Yo ${msg.message.chat.first_name}</b></i>, –∫–∞–∂–µ—Ç—Å—è —Ç—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ. –î–∞–≤–∞–π –∏—Å–ø—Ä–∞–≤–∏–º!\n<i>–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!</i>`,
              {
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                  inline_keyboard: [
                    [{ text: "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "profile" }],
                    [
                      {
                        text: "üè† –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data: "home",
                      },
                    ],
                  ],
                }),
              }
            );
          }
        }

        break;

      case "cancel_order":
        // bot.deleteMessage(chatId, messageId);

        const cancelOrder = await delOrder(userStorage[chatId].order_id);
        if (cancelOrder === true) {
          await start_update(bot, chatId, user_callBack, messageId);
          logger.info(
            objectToString(
              `Cancel order by ${msg.message.chat.username}: Order_id ${userStorage[chatId].order_id} - ${cancelOrder}`
            )
          );
        } else {
          logger.info(objectToString(cancelOrder));
        }
        break;

      case "payment":
        // tech(bot, chatId, msg.message.chat.username);

        if (userSession && userSession.photos) {
          —ã;
          selectedPhoto = userSession.photos[userSession.currentIndex];
        } else {
          console.error("userSession or photos is undefined or null.");
        }

        const res = await check_payment(chatId);
        console.log(res);

        if (res == false) {
          bot.sendMessage(
            chatId,
            `<i><b>Yo ${msg.message.chat.first_name}</b></i>, –∫–∞–∂–µ—Ç—Å—è —Ç—ã –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–ª –∑–∞–∫–∞–∑ ${userStorage[chatId].order_id}.`,
            {
              parse_mode: "HTML",
              reply_markup: JSON.stringify({
                inline_keyboard: [
                  [
                    {
                      text: "üè† –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                      callback_data: "exit",
                    },
                  ],
                ],
              }),
            }
          );
        } else {
          bot.sendMessage(
            chatId,
            `ü§ë Yo <b><i>${msg.message.chat.first_name}</i></b>, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —á–µ–∫ –Ω–∞ –ø–æ—á—Ç—É!\n` +
              `–¢–∞–∫ –∂–µ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —É —Ç–µ–±—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ—è–≤–∏—Ç—Å—è —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–≤–æ–µ–π –ø–æ—Å—ã–ª–∫–∏.\n\n`,
            {
              parse_mode: "HTML",
              reply_markup: JSON.stringify(keyboard),
            }
          );

          await createPDF();
          const fileStream = fs.createReadStream("output.csv");

          bot.sendPhoto(process.env.GROUP_ADMIN, selectedPhoto.path, {
            caption:
              `<b>ü§ë Status</b>: <i> –ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑</i>\n` +
              `@DreasTamyot –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ${msg.message.chat.first_name} (${chatId})\n\n` +
              `–ö—Ä–æ—Å—Å–æ–≤–∫–∏: <i>${selectedPhoto.name}</i>\n` +
              `–†–∞–∑–º–µ—Ä: <i>${selectedPhoto.size} us</i>\n` +
              `–¶–µ–Ω–∞: <i>${selectedPhoto.price}–†</i>\n\n` +
              `–¢–≥ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <i><b>@${user_callBack}</b></i>`,
            parse_mode: "HTML",
          });
          bot.sendDocument(process.env.GROUP_ADMIN, fileStream);

          await update_bonus(selectedPhoto, chatId);
          logger.info(
            `User ${msg.message.chat.first_name} paid and update bonuses.`
          );
        }
        break;
    }
  });

  bot.on("text", async (msg) => {
    const chatId = msg.chat.id;
    const userText = msg.text;
    const messageId = msg.message_id;

    if (userStorage[chatId]) {
      const currentState = userStorage[chatId].state;

      switch (currentState) {
        case "articul":
          userStorage[chatId].articul = userText;

          const buff = await search_articul(userText);

          if (buff === false) {
            await bot.deleteMessage(chatId, messageId - 1);
            await bot.sendPhoto(chatId, await send_photo("logo"), {
              caption: `Yo <i><b>${msg.chat.first_name}</b></i>, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –∞—Ä—Ç–∏–∫—É–ª. –ò–ª–∏ –¥–∞–Ω–Ω–∞—è –ø–∞—Ä–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ –æ–ø–ª–∞—Ç—ã.`,
              parse_mode: "HTML",
              reply_markup: JSON.stringify({
                inline_keyboard: [
                  [
                    {
                      text: "üè† –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                      callback_data: "exit",
                    },
                  ],
                ],
              }),
            });
          } else {
            userStorage[chatId] = { photo: buff, currentIndex: 0 };
            selectedPhoto = userStorage[chatId].photo;

            logger.info(
              `Output articul by ${msg.chat.username}: ${objectToString(
                selectedPhoto
              )}`
            );
            await bot.deleteMessage(chatId, messageId - 1);
            await bot.sendPhoto(chatId, selectedPhoto[0].path, {
              caption:
                `üëü <b>–ö—Ä–æ—Å—Å–æ–≤–∫–∏ <i>${selectedPhoto[0].name}</i></b>\n\n` +
                `üßµ <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n\n` +
                `‚ûñ <b>–¶–≤–µ—Ç:</b> <i>${selectedPhoto[0].color}</i>\n` +
                `‚ûñ <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b> <i>${selectedPhoto[0].material}</i>\n` +
                `‚ûñ <b>–†–∞–∑–º–µ—Ä:</b> <i>${selectedPhoto[0].size} us</i>\n\n` +
                `üí∏ <b>–¶–µ–Ω–∞:</b> <code>${selectedPhoto[0].price}‚ÇΩ</code>\n\n`,
              parse_mode: "HTML",

              reply_markup: JSON.stringify({
                inline_keyboard: [
                  [
                    {
                      text: "üõí –ó–∞–∫–∞–∑–∞—Ç—å",
                      callback_data: "order",
                    },
                  ],
                  [
                    {
                      text: "üè† –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                      callback_data: "exit",
                    },
                  ],
                ],
              }),
            });
          }
          break;

        case "awaitingAddress":
          userStorage[chatId].address = userText;

          if (userStorage[chatId].address.length > 0) {
            await add_location(chatId, userStorage[chatId].address);
          }
          delete userStorage[chatId];
          await profile(
            bot,
            chatId,
            userStorage,
            msg.chat.first_name,
            messageId - 1
          );
          break;

        case "awaitingEmail":
          userStorage[chatId].email = userText;

          if (userStorage[chatId].email.length > 0) {
            await add_email(chatId, userStorage[chatId].email);
          }
          delete userStorage[chatId];
          await profile(
            bot,
            chatId,
            userStorage,
            msg.chat.first_name,
            messageId - 1
          );
          break;

        case "awaitingFIO":
          userStorage[chatId].fio = userText;

          if (userStorage[chatId].fio.length > 0) {
            await add_fio(chatId, userStorage[chatId].fio);
          }
          delete userStorage[chatId];
          await profile(
            bot,
            chatId,
            userStorage,
            msg.chat.first_name,
            messageId - 1
          );
          break;

        case "brandChoice":
          userStorage[chatId].size = userText;

          const log = await addToOrder(
            userStorage[chatId].data,
            userStorage[chatId].size,
            chatId
          );
          const user = await get_userStyle(chatId);

          if (
            parseFloat(userStorage[chatId].size) &&
            log != false &&
            log != undefined &&
            log.some((log) => log.style === user[0].style)
          ) {
            const logMessage = `${userStorage[chatId].data}, size: ${
              userStorage[chatId].size
            }\nLog: ${objectToString(log)}\n\nUser: ${objectToString(user)}\n`;

            logger.info(logMessage);

            userSession = {
              size: userStorage[chatId].size,
              shooes_name: log[0].name,
              gender: user[0].gender,
              style: user[0].style,
            };
            userSessions.set(chatId, userSession);

            const res = await get_gender(
              userSession.shooes_name,
              userSession.size,
              userSession.style,
              userSession.gender
            );

            userStorage[chatId] = {
              photo: res,
              currentIndex: 0,
            };

            if (userStorage[chatId].photo.length > 0) {
              const currentIndex = userStorage[chatId].currentIndex;
              const firstPhoto = userStorage[chatId].photo[currentIndex];
              const totalPhotos = userStorage[chatId].photo.length;
              const showPrevButton = currentIndex > 0;

              await editCaptionShow(
                bot,
                chatId,
                userStorage[chatId],
                messageId - 1,
                currentIndex,
                firstPhoto,
                totalPhotos,
                showPrevButton
              );

              logger.info(
                `Size: ${userStorage[chatId].size} us for ${
                  msg.chat.first_name
                } of ${log[0].name}\n Gender: ${user[0].gender}\n Style: ${
                  user[0].style
                }\n. Success, Output: ${res.length}\n\n${objectToString(
                  res
                )}\n\n`
              );
            }
          } else {
            bot.deleteMessage(chatId, messageId - 1);
            bot.deleteMessage(chatId, messageId);
            userSession = {
              gender: user[0].gender,
            };
            if (userSession.gender === "man") {
              userSession.gender = "–º—É–∂—Å–∫–æ–π";
            } else {
              userSession.gender = "–∂–µ–Ω—Å–∫–∏–π";
            }
            logger.info(
              `${msg.chat.first_name} cant find ${userStorage[chatId].data} ${userStorage[chatId].size} us`
            );
            await bot.sendMessage(
              chatId,
              `‚òπÔ∏è <b>${msg.chat.first_name}</b>, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ ${userSession.gender} —Ä–∞–∑–º–µ—Ä <b><i>${userStorage[chatId].size} us </i></b>–±—Ä–µ–Ω–¥: <b><i>${userStorage[chatId].data}</i></b>.\n\n` +
                `<b>–ù–æ</b> –Ω–µ —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è, —Å–ª–µ–¥–∏ –∑–∞ –∞–ø–¥–µ–π—Ç–∞–º–∏ –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ <i><b><a href="https://t.me/stockhub12">üåê StockHub!</a></b></i>`,
              {
                reply_markup: JSON.stringify({
                  inline_keyboard: [
                    [{ text: "üè† –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "end" }],
                  ],
                }),
                parse_mode: "HTML",
              }
            );
          }
          break;
      }
    }
  });
};
